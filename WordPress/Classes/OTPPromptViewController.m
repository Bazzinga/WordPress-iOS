//
//  OTPPromptViewController.m
//  WordPress
//
//  Created by Jorge Bernal on 11/02/14.
//  Copyright (c) 2014 WordPress. All rights reserved.
//

#import "OTPPromptViewController.h"
#import "WPNUXMainButton.h"
#import "WPWalkthroughTextField.h"
#import "WPNUXUtility.h"
#import "WPNUXBackButton.h"
#import "UILabel+SuggestSize.h"


@interface OTPPromptViewController () <UITextFieldDelegate> {
    UILabel *_titleLabel;
    UILabel *_descriptionLabel;
    UITextField *_otpField;
    WPNUXBackButton *_cancelButton;
    WPNUXMainButton *_signInButton;

    CGFloat _keyboardOffset;
}

@end

@implementation OTPPromptViewController

CGFloat const OTPPromptStandardOffset = 15.0;
CGFloat const OTPPromptIconVerticalOffset = 70.0;
CGFloat const OTPPromptMaxTextWidth = 260.0;
CGFloat const OTPPromptTextFieldWidth = 320.0;
CGFloat const OTPPromptTextFieldHeight = 44.0;
CGFloat const OTPPromptTextFieldPhoneHeight = 38.0;
CGFloat const OTPPromptKeyboardOffset = 132.0;
CGFloat const OTPPromptiOS7StatusBarOffset = 20.0;
CGFloat const OTPPromptButtonWidth = 290.0;
CGFloat const OTPPromptButtonHeight = 40.0;

- (void)dealloc {
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}

- (void)viewDidLoad {
    [super viewDidLoad];

    self.view.backgroundColor = [WPNUXUtility backgroundColor];

    [self initializeView];

    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillShow:) name:UIKeyboardWillShowNotification object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillHide:) name:UIKeyboardWillHideNotification object:nil];
}

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    [_otpField becomeFirstResponder];
}

- (void)resetAuthenticationState {
    [self setAuthenticating:NO];
    [_otpField becomeFirstResponder];
}

#pragma mark - UITextField delegate methods

- (BOOL)textFieldShouldReturn:(UITextField *)textField {
    if (textField == _otpField) {
        [self signInButtonAction:nil];
    }

	return YES;
}

- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string
{
    NSMutableString *updatedString = [[NSMutableString alloc] initWithString:textField.text];
    [updatedString replaceCharactersInRange:range withString:string];
    BOOL updatedStringHasContent = [[updatedString trim] length] != 0;
    _signInButton.enabled = updatedStringHasContent;

    return YES;
}

#pragma mark - Private methods

- (void)initializeView {
    [self addControls];
    [self layoutControls];
}

- (void)addControls {
    // Add Cancel Button
    if (_cancelButton == nil) {
        _cancelButton = [[WPNUXBackButton alloc] init];
        [_cancelButton setTitle:NSLocalizedString(@"Cancel", nil) forState:UIControlStateNormal];
        [_cancelButton addTarget:self action:@selector(cancelButtonAction) forControlEvents:UIControlEventTouchUpInside];
        [_cancelButton sizeToFit];
        _cancelButton.autoresizingMask = UIViewAutoresizingFlexibleRightMargin;
        [self.view addSubview:_cancelButton];
    }

    // Add Title
    if (_titleLabel == nil) {
        _titleLabel = [[UILabel alloc] init];
        _titleLabel.attributedText = [[NSAttributedString alloc] initWithString:NSLocalizedString(@"Two Step Authentication", @"Two Step code prompt title") attributes:[WPNUXUtility titleAttributesWithColor:[UIColor whiteColor]]];
        _titleLabel.numberOfLines = 0;
        _titleLabel.adjustsFontSizeToFitWidth = YES;
        _titleLabel.backgroundColor = [UIColor clearColor];
        _titleLabel.autoresizingMask = UIViewAutoresizingFlexibleRightMargin | UIViewAutoresizingFlexibleLeftMargin;
        [self.view addSubview:_titleLabel];
    }

    // Add Terms of Service Label
    if (_descriptionLabel == nil) {
        _descriptionLabel = [[UILabel alloc] init];
        _descriptionLabel.userInteractionEnabled = YES;
        _descriptionLabel.textAlignment = NSTextAlignmentCenter;
        _descriptionLabel.text = NSLocalizedString(@"Please enter the verification code generated by your Authenticator application.", nil);
        _descriptionLabel.numberOfLines = 0;
        _descriptionLabel.backgroundColor = [UIColor clearColor];
        _descriptionLabel.font = [WPNUXUtility tosLabelFont];
        _descriptionLabel.textColor = [WPNUXUtility tosLabelColor];
        _descriptionLabel.autoresizingMask = UIViewAutoresizingFlexibleRightMargin | UIViewAutoresizingFlexibleLeftMargin;
        [self.view addSubview:_descriptionLabel];
    }

    // Add OTP
    if (_otpField == nil) {
        _otpField = [[WPWalkthroughTextField alloc] initWithLeftViewImage:[UIImage imageNamed:@"icon-password-field"]];
        _otpField.backgroundColor = [UIColor whiteColor];
        _otpField.font = [WPNUXUtility textFieldFont];
        _otpField.adjustsFontSizeToFitWidth = YES;
        _otpField.placeholder = NSLocalizedString(@"Verification Code", @"");
        _otpField.delegate = self;
        _otpField.autocorrectionType = UITextAutocorrectionTypeNo;
        _otpField.autocapitalizationType = UITextAutocapitalizationTypeNone;
        _otpField.keyboardType = UIKeyboardTypeNumberPad;
        _otpField.keyboardAppearance = UIKeyboardAppearanceDark;
        _otpField.autoresizingMask = UIViewAutoresizingFlexibleRightMargin | UIViewAutoresizingFlexibleLeftMargin;
        [self.view addSubview:_otpField];
    }

    // Add Sign In Button
    if (_signInButton == nil) {
        _signInButton = [[WPNUXMainButton alloc] init];
        [_signInButton addTarget:self action:@selector(signInButtonAction:) forControlEvents:UIControlEventTouchUpInside];
        _signInButton.autoresizingMask = UIViewAutoresizingFlexibleRightMargin | UIViewAutoresizingFlexibleLeftMargin;
        [self.view addSubview:_signInButton];
        _signInButton.enabled = NO;
    }
}

- (void)layoutControls {
    CGFloat x,y;

    CGFloat viewWidth = CGRectGetWidth(self.view.bounds);
    CGFloat viewHeight = CGRectGetHeight(self.view.bounds);

    // Layout Cancel Button
    x = 0;
    y = 0.5 * OTPPromptStandardOffset + OTPPromptiOS7StatusBarOffset;
    _cancelButton.frame = CGRectMake(x, y, CGRectGetWidth(_cancelButton.frame), OTPPromptButtonHeight);

    // Layout the controls starting out from y of 0, then offset them once the height of the controls
    // is accurately calculated we can determine the vertical center and adjust everything accordingly.

    // Calculate total height and starting Y origin of controls
    CGSize titleSize = [_titleLabel suggestedSizeForWidth:OTPPromptMaxTextWidth];
    CGFloat heightOfControls = titleSize.height + OTPPromptStandardOffset + OTPPromptTextFieldHeight + OTPPromptStandardOffset + OTPPromptButtonHeight;
    CGFloat startingYForCenteredControls = floorf((viewHeight - heightOfControls)/2.0);

    // Layout Title
    x = (viewWidth - titleSize.width)/2.0;
    y = startingYForCenteredControls;
    _titleLabel.frame = CGRectIntegral(CGRectMake(x, y, titleSize.width, titleSize.height));

    // Layout Description
    x = (viewWidth - OTPPromptTextFieldWidth)/2.0;
    y = CGRectGetMaxY(_titleLabel.frame) + OTPPromptStandardOffset;
    _descriptionLabel.frame = CGRectIntegral(CGRectMake(x, y, OTPPromptTextFieldWidth, OTPPromptTextFieldHeight));

    // Layout OTP
    x = (viewWidth - OTPPromptTextFieldWidth)/2.0;
    y = CGRectGetMaxY(_descriptionLabel.frame) + OTPPromptStandardOffset;
    _otpField.frame = CGRectIntegral(CGRectMake(x, y, OTPPromptTextFieldWidth, OTPPromptTextFieldHeight));

    // Layout Sign in Button
    x = (viewWidth - OTPPromptButtonWidth) / 2.0;;
    y = CGRectGetMaxY(_otpField.frame) + OTPPromptStandardOffset;
    _signInButton.frame = CGRectIntegral(CGRectMake(x, y, OTPPromptButtonWidth, OTPPromptButtonHeight));
}

- (void)cancelButtonAction {
    [self.delegate promptDidCancel:self];
}

- (void)signInButtonAction:(NSString *)sender {
    [self setAuthenticating:YES];
    [self.delegate prompt:self didEnterPassword:_otpField.text];
}

- (void)setAuthenticating:(BOOL)authenticating {
    _signInButton.enabled = !authenticating;
    _otpField.enabled = !authenticating;
    [_signInButton showActivityIndicator:authenticating];
}

- (void)keyboardWillShow:(NSNotification *)notification {
    NSDictionary *keyboardInfo = notification.userInfo;
    CGFloat animationDuration = [[keyboardInfo objectForKey:UIKeyboardAnimationDurationUserInfoKey] floatValue];
    CGRect keyboardFrame = [[[notification userInfo] objectForKey:UIKeyboardFrameEndUserInfoKey] CGRectValue];
    keyboardFrame = [self.view convertRect:keyboardFrame fromView:nil];
    CGFloat newKeyboardOffset = (CGRectGetMaxY(_signInButton.frame) - CGRectGetMinY(keyboardFrame)) + OTPPromptStandardOffset;

    if (newKeyboardOffset < 0) {
        newKeyboardOffset = 0;
        return;
    }

    [UIView animateWithDuration:animationDuration animations:^{
        for (UIControl *control in [self controlsToMoveForTextEntry]) {
            CGRect frame = control.frame;
            frame.origin.y -= newKeyboardOffset;
            control.frame = frame;
        }

        for (UIControl *control in [self controlsToHideForTextEntry]) {
            control.alpha = 0.0;
        }
    } completion:^(BOOL finished) {

        _keyboardOffset += newKeyboardOffset;
    }];
}

- (void)keyboardWillHide:(NSNotification *)notification {
    NSDictionary *keyboardInfo = notification.userInfo;
    CGFloat animationDuration = [[keyboardInfo objectForKey:UIKeyboardAnimationDurationUserInfoKey] floatValue];

    CGFloat currentKeyboardOffset = _keyboardOffset;
    _keyboardOffset = 0;

    [UIView animateWithDuration:animationDuration animations:^{
        for (UIControl *control in [self controlsToMoveForTextEntry]) {
            CGRect frame = control.frame;
            frame.origin.y += currentKeyboardOffset;
            control.frame = frame;
        }

        for (UIControl *control in [self controlsToHideForTextEntry]) {
            control.alpha = 1.0;
        }
    }];
}

- (NSArray *)controlsToMoveForTextEntry {
    return @[_titleLabel, _descriptionLabel, _otpField, _signInButton];
}

- (NSArray *)controlsToHideForTextEntry {
    return @[];
}

@end
